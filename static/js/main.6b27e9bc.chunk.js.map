{"version":3,"sources":["components/asset/icon/clearSky.svg","components/asset/icon/fewCloud.svg","components/asset/icon/scatteredClouds.svg","components/asset/icon/brokenCloud.svg","components/asset/icon/showerRain.svg","components/asset/icon/rain.svg","components/asset/icon/thunderStorm.svg","components/asset/icon/snow.svg","components/asset/icon/mist.svg","components/GetWeather.js","components/PrintWeather.js","components/Form.js","index.js"],"names":["CallApi","city","a","url","request","axios","get","response","status","cityName","data","name","mainWeather","weather","description","mainInfo","main","temp","feelLike","feels_like","tempMin","temp_min","tempMax","temp_max","humidity","windSpeed","wind","speed","icon","iconNum","replace","iconId","sunny","fewCloud","scatteredClouds","brokenCloud","showerRain","rain","thunderstorm","snow","mist","console","log","currentWeather","message","PrintWeather","props","weatherImgLeft","useRef","weatherImgRight","weatherInfo","useEffect","gsap","timeline","from","current","opacity","y","duration","ease","src","alt","className","ref","uuid","Form","useState","setWeatherInfo","isSearch","setIsSearch","submitForm","e","preventDefault","searchCity","target","value","length","reset","id","onSubmit","type","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b27e9bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clearSky.1ab630c8.svg\";","export default __webpack_public_path__ + \"static/media/fewCloud.e75c4f9b.svg\";","export default __webpack_public_path__ + \"static/media/scatteredClouds.c919b36d.svg\";","export default __webpack_public_path__ + \"static/media/brokenCloud.b11092bf.svg\";","export default __webpack_public_path__ + \"static/media/showerRain.d3ec9e0d.svg\";","export default __webpack_public_path__ + \"static/media/rain.1b23da08.svg\";","export default __webpack_public_path__ + \"static/media/thunderStorm.85c03b9c.svg\";","export default __webpack_public_path__ + \"static/media/snow.cffe015a.svg\";","export default __webpack_public_path__ + \"static/media/mist.f3eb2687.svg\";","// import React from 'react';\r\nimport axios from 'axios';\r\nimport './asset/style/_weather.scss';\r\nimport sunny from './asset/icon/clearSky.svg';\r\nimport fewCloud from './asset/icon/fewCloud.svg';\r\nimport scatteredClouds from './asset/icon/scatteredClouds.svg';\r\nimport brokenCloud from './asset/icon/brokenCloud.svg';\r\nimport showerRain from './asset/icon/showerRain.svg';\r\nimport rain from './asset/icon/rain.svg';\r\nimport thunderstorm from './asset/icon/thunderStorm.svg';\r\nimport snow from './asset/icon/snow.svg';\r\nimport mist from './asset/icon/mist.svg';\r\n\r\n\r\n\r\n  const CallApi=async(city)=>{\r\n      const API_KEY =`5dd0480be9870a0a40413a3f9f49139e`;\r\n           let city_name=city;\r\n      const url=`https://api.openweathermap.org/data/2.5/weather?q=${city_name}&appid=${API_KEY}&units=metric`;\r\n  \r\n      //  const url =`api.openweathermap.org/data/2.5/weather?q=${city_name}&appid=${API_KEY}`;\r\n        let request =axios.get(url);\r\n        let response=await request;\r\n         \r\n        try{\r\n           if(response.status===200){\r\n            const cityName=response.data.name;\r\n            const mainWeather =response.data.weather[0];\r\n            const description=mainWeather.description;\r\n            const mainInfo=response.data.main;\r\n            const temp=mainInfo.temp;\r\n            const feelLike=mainInfo.feels_like;\r\n            const tempMin =mainInfo.temp_min;\r\n            const tempMax=mainInfo.temp_max;\r\n            const humidity=mainInfo.humidity;\r\n            const windSpeed=response.data.wind.speed;\r\n            \r\n\r\n            let icon = response.data.weather[0].icon;\r\n            let iconNum = icon.replace(/\\D/g, \"\"); \r\n            let iconId =\"\";\r\n             switch(iconNum){\r\n               case '01':\r\n                 iconId=sunny;\r\n                 break;\r\n               case '02':\r\n                 iconId=fewCloud;\r\n                 break;\r\n                case '03':\r\n                  iconId=scatteredClouds;\r\n                  break;  \r\n                case '04':\r\n                  iconId=brokenCloud;\r\n                  break;\r\n                 case '09':\r\n                  iconId=showerRain;\r\n                  break;\r\n                 case '10':\r\n                    iconId=rain;\r\n                    break;\r\n                  case '11':\r\n                      iconId=thunderstorm;\r\n                      break;\r\n                   case '13':\r\n                        iconId=snow;\r\n                        break;\r\n                     case '50':\r\n                          iconId=mist;\r\n                          break;   \r\n                  default:\r\n                    console.log(`no image`);\r\n             }\r\n             const currentWeather ={cityName, description, temp, feelLike, tempMin, tempMax, humidity, windSpeed, iconId}\r\n  \r\n            return(\r\n              currentWeather\r\n            )\r\n           }\r\n        }catch(err){\r\n          console.log(err.message);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\nexport default CallApi;\r\n\r\n","import React, {useRef, useEffect} from 'react';\r\nimport { v4 as uuid } from \"uuid\";\r\nimport {gsap} from \"gsap\";\r\n\r\nconst PrintWeather =(props)=>{\r\n  let weatherImgLeft=useRef(null);\r\n  let weatherImgRight=useRef(null);\r\n  let weatherInfo=useRef(null);\r\n\r\n    useEffect(()=>{\r\n      let tl=gsap.timeline();\r\n  tl.from(weatherInfo.current, {opacity:0, y:\"100\", duration:1, ease:\"back.out\"})\r\n  .from([weatherImgLeft.current, weatherImgRight.current], {y:-160, opacity:0, duration:1, ease:\"back.out\"},\"-=0.5\")\r\n}, [props.name])\r\n;\r\n\r\n  return(\r\n    <>\r\n    <img src={props.iconId} alt=\"weather-icon\" className=\"weather-icon\"  ref={weatherImgLeft}/>\r\n    <img src={props.iconId} alt=\"weather-icon\" className=\"weather-icon-right\"  ref={weatherImgRight}/>\r\n    <div ref={weatherInfo}>\r\n      <div className=\"main-info\">\r\n      <h1>{props.name}</h1>\r\n      <h1>{props.temp}<span>&#176;</span>C</h1>\r\n      <h3>{props.description}</h3>\r\n    </div>\r\n      <ul className=\"detail-info\">\r\n        <li key={uuid()}>\r\n           <p className=\"small-text\">Feels Like: {props.feelLike}<span>&#8451;</span></p>\r\n        </li>\r\n        <li key={uuid()}>\r\n          <p className=\"small-text\">Humidity: {props.humidity}<span>&#37;</span></p>\r\n        </li>\r\n        <li key={uuid()}>\r\n          <p className=\"small-text\">Wind: {props.windSpeed}Km/h</p>\r\n        </li>\r\n        <li className=\"small-text\" key={uuid()}>\r\n            <p>H: {props.tempMax}<span>&#8451;</span>\r\n            </p></li>\r\n          <li className=\"small-text\" key={uuid()}>\r\n            <p>L: {props.tempMin}<span>&#8451;</span>\r\n            </p>\r\n          </li>\r\n      </ul>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default PrintWeather;","import React, {useState} from 'react';\r\nimport CallApi from './GetWeather';\r\nimport PrintWeather from './PrintWeather';\r\n\r\n \r\n\r\n\r\n\r\nconst Form = () => {\r\n\r\n  const [weatherInfo, setWeatherInfo]=useState({cityName:\"\",description:\"\", temp:\"\",feelLike:\"\", humidity:\"\",windSpeed:\"\", tempMax:\"\", tempMin:\"\", iconId:\"\"});\r\n  const [isSearch, setIsSearch]=useState(false);\r\n\r\n  const submitForm=async(e)=>{\r\n    e.preventDefault();\r\n    let searchCity = e.target.city.value;\r\n    if(searchCity.length>0){\r\n      let response = await CallApi(searchCity);\r\n      //  console.log(response);\r\n       setWeatherInfo(response);\r\n       setIsSearch(true);\r\n       e.target.reset();\r\n    }else{\r\n      return\r\n    }\r\n  };\r\n\r\n\r\n  return ( \r\n    <div className=\"container\">\r\n      <form id=\"search-weather\" onSubmit={submitForm}>\r\n        <h3>Find the City Weather here</h3>\r\n        <input type=\"text\" name=\"city\" placeholder=\"city name\" />\r\n        <input type=\"submit\" value=\"search\" className=\"btn-style\" />\r\n      </form>\r\n      <div className={isSearch?\"weather-info\":\"d-none\"}>\r\n      <PrintWeather name={weatherInfo.cityName} description={weatherInfo.description}  temp={weatherInfo.temp} feelLike={weatherInfo.feelLike}  humidity={weatherInfo.humidity}  windSpeed={weatherInfo.windSpeed}  tempMax={weatherInfo.tempMax}  tempMin={weatherInfo.tempMin}  iconId={weatherInfo.iconId} />\r\n      </div>\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Form from './components/Form.js';\r\nimport './components/asset/style/style.scss';\r\n\r\nReactDOM.render(<Form/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}